DROP TABLE user_roles IF EXISTS;
DROP TABLE menu IF EXISTS;
DROP TABLE users IF EXISTS;
DROP TABLE restoran IF EXISTS;
DROP TABLE dish IF EXISTS;
DROP TABLE voting IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;

CREATE TABLE users
(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  email            VARCHAR(255)            NOT NULL,
  password         VARCHAR(255)            NOT NULL,
  registered       TIMESTAMP DEFAULT now() NOT NULL,
  enabled          BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx ON USERS (email);

CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restoran
(
  id     INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name   VARCHAR(255)
);

CREATE TABLE menu
(
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  operdate    TIMESTAMP    NOT NULL,
  restoran    INTEGER      NOT NULL,
  FOREIGN KEY (restoran) REFERENCES RESTORAN (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX menun_unique_restoran_datetime_idx ON menu (restoran, operdate)

CREATE TABLE dish
(
  id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  menu    INTEGER      NOT NULL,
  name    VARCHAR(255),
  price   VARCHAR(255),
  FOREIGN KEY (menu) REFERENCES MENU (id) ON DELETE CASCADE
);

CREATE TABLE voting
(
  id        INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  operdate  TIMESTAMP    NOT NULL,
  menu      INTEGER      NOT NULL,
  user      INTEGER      NOT NULL,
  FOREIGN KEY (menu) REFERENCES MENU (id) ON DELETE CASCADE,
  FOREIGN KEY (user) REFERENCES USERS (id) ON DELETE CASCADE
);